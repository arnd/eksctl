// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/weaveworks/eksctl/pkg/authconfigmap"
	"github.com/weaveworks/eksctl/pkg/iam"
)

type FakeManager struct {
	AddAccountStub        func(string) error
	addAccountMutex       sync.RWMutex
	addAccountArgsForCall []struct {
		arg1 string
	}
	addAccountReturns struct {
		result1 error
	}
	addAccountReturnsOnCall map[int]struct {
		result1 error
	}
	AddIdentityStub        func(iam.Identity) error
	addIdentityMutex       sync.RWMutex
	addIdentityArgsForCall []struct {
		arg1 iam.Identity
	}
	addIdentityReturns struct {
		result1 error
	}
	addIdentityReturnsOnCall map[int]struct {
		result1 error
	}
	AddIdentityIfNotPresentStub        func(iam.Identity, func(iam.Identity) bool) error
	addIdentityIfNotPresentMutex       sync.RWMutex
	addIdentityIfNotPresentArgsForCall []struct {
		arg1 iam.Identity
		arg2 func(iam.Identity) bool
	}
	addIdentityIfNotPresentReturns struct {
		result1 error
	}
	addIdentityIfNotPresentReturnsOnCall map[int]struct {
		result1 error
	}
	IdentitiesStub        func() ([]iam.Identity, error)
	identitiesMutex       sync.RWMutex
	identitiesArgsForCall []struct {
	}
	identitiesReturns struct {
		result1 []iam.Identity
		result2 error
	}
	identitiesReturnsOnCall map[int]struct {
		result1 []iam.Identity
		result2 error
	}
	RemoveIdentityStub        func(string, bool) error
	removeIdentityMutex       sync.RWMutex
	removeIdentityArgsForCall []struct {
		arg1 string
		arg2 bool
	}
	removeIdentityReturns struct {
		result1 error
	}
	removeIdentityReturnsOnCall map[int]struct {
		result1 error
	}
	SaveStub        func() error
	saveMutex       sync.RWMutex
	saveArgsForCall []struct {
	}
	saveReturns struct {
		result1 error
	}
	saveReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeManager) AddAccount(arg1 string) error {
	fake.addAccountMutex.Lock()
	ret, specificReturn := fake.addAccountReturnsOnCall[len(fake.addAccountArgsForCall)]
	fake.addAccountArgsForCall = append(fake.addAccountArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.AddAccountStub
	fakeReturns := fake.addAccountReturns
	fake.recordInvocation("AddAccount", []interface{}{arg1})
	fake.addAccountMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeManager) AddAccountCallCount() int {
	fake.addAccountMutex.RLock()
	defer fake.addAccountMutex.RUnlock()
	return len(fake.addAccountArgsForCall)
}

func (fake *FakeManager) AddAccountCalls(stub func(string) error) {
	fake.addAccountMutex.Lock()
	defer fake.addAccountMutex.Unlock()
	fake.AddAccountStub = stub
}

func (fake *FakeManager) AddAccountArgsForCall(i int) string {
	fake.addAccountMutex.RLock()
	defer fake.addAccountMutex.RUnlock()
	argsForCall := fake.addAccountArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeManager) AddAccountReturns(result1 error) {
	fake.addAccountMutex.Lock()
	defer fake.addAccountMutex.Unlock()
	fake.AddAccountStub = nil
	fake.addAccountReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) AddAccountReturnsOnCall(i int, result1 error) {
	fake.addAccountMutex.Lock()
	defer fake.addAccountMutex.Unlock()
	fake.AddAccountStub = nil
	if fake.addAccountReturnsOnCall == nil {
		fake.addAccountReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addAccountReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) AddIdentity(arg1 iam.Identity) error {
	fake.addIdentityMutex.Lock()
	ret, specificReturn := fake.addIdentityReturnsOnCall[len(fake.addIdentityArgsForCall)]
	fake.addIdentityArgsForCall = append(fake.addIdentityArgsForCall, struct {
		arg1 iam.Identity
	}{arg1})
	stub := fake.AddIdentityStub
	fakeReturns := fake.addIdentityReturns
	fake.recordInvocation("AddIdentity", []interface{}{arg1})
	fake.addIdentityMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeManager) AddIdentityCallCount() int {
	fake.addIdentityMutex.RLock()
	defer fake.addIdentityMutex.RUnlock()
	return len(fake.addIdentityArgsForCall)
}

func (fake *FakeManager) AddIdentityCalls(stub func(iam.Identity) error) {
	fake.addIdentityMutex.Lock()
	defer fake.addIdentityMutex.Unlock()
	fake.AddIdentityStub = stub
}

func (fake *FakeManager) AddIdentityArgsForCall(i int) iam.Identity {
	fake.addIdentityMutex.RLock()
	defer fake.addIdentityMutex.RUnlock()
	argsForCall := fake.addIdentityArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeManager) AddIdentityReturns(result1 error) {
	fake.addIdentityMutex.Lock()
	defer fake.addIdentityMutex.Unlock()
	fake.AddIdentityStub = nil
	fake.addIdentityReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) AddIdentityReturnsOnCall(i int, result1 error) {
	fake.addIdentityMutex.Lock()
	defer fake.addIdentityMutex.Unlock()
	fake.AddIdentityStub = nil
	if fake.addIdentityReturnsOnCall == nil {
		fake.addIdentityReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addIdentityReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) AddIdentityIfNotPresent(arg1 iam.Identity, arg2 func(iam.Identity) bool) error {
	fake.addIdentityIfNotPresentMutex.Lock()
	ret, specificReturn := fake.addIdentityIfNotPresentReturnsOnCall[len(fake.addIdentityIfNotPresentArgsForCall)]
	fake.addIdentityIfNotPresentArgsForCall = append(fake.addIdentityIfNotPresentArgsForCall, struct {
		arg1 iam.Identity
		arg2 func(iam.Identity) bool
	}{arg1, arg2})
	stub := fake.AddIdentityIfNotPresentStub
	fakeReturns := fake.addIdentityIfNotPresentReturns
	fake.recordInvocation("AddIdentityIfNotPresent", []interface{}{arg1, arg2})
	fake.addIdentityIfNotPresentMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeManager) AddIdentityIfNotPresentCallCount() int {
	fake.addIdentityIfNotPresentMutex.RLock()
	defer fake.addIdentityIfNotPresentMutex.RUnlock()
	return len(fake.addIdentityIfNotPresentArgsForCall)
}

func (fake *FakeManager) AddIdentityIfNotPresentCalls(stub func(iam.Identity, func(iam.Identity) bool) error) {
	fake.addIdentityIfNotPresentMutex.Lock()
	defer fake.addIdentityIfNotPresentMutex.Unlock()
	fake.AddIdentityIfNotPresentStub = stub
}

func (fake *FakeManager) AddIdentityIfNotPresentArgsForCall(i int) (iam.Identity, func(iam.Identity) bool) {
	fake.addIdentityIfNotPresentMutex.RLock()
	defer fake.addIdentityIfNotPresentMutex.RUnlock()
	argsForCall := fake.addIdentityIfNotPresentArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeManager) AddIdentityIfNotPresentReturns(result1 error) {
	fake.addIdentityIfNotPresentMutex.Lock()
	defer fake.addIdentityIfNotPresentMutex.Unlock()
	fake.AddIdentityIfNotPresentStub = nil
	fake.addIdentityIfNotPresentReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) AddIdentityIfNotPresentReturnsOnCall(i int, result1 error) {
	fake.addIdentityIfNotPresentMutex.Lock()
	defer fake.addIdentityIfNotPresentMutex.Unlock()
	fake.AddIdentityIfNotPresentStub = nil
	if fake.addIdentityIfNotPresentReturnsOnCall == nil {
		fake.addIdentityIfNotPresentReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addIdentityIfNotPresentReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) Identities() ([]iam.Identity, error) {
	fake.identitiesMutex.Lock()
	ret, specificReturn := fake.identitiesReturnsOnCall[len(fake.identitiesArgsForCall)]
	fake.identitiesArgsForCall = append(fake.identitiesArgsForCall, struct {
	}{})
	stub := fake.IdentitiesStub
	fakeReturns := fake.identitiesReturns
	fake.recordInvocation("Identities", []interface{}{})
	fake.identitiesMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeManager) IdentitiesCallCount() int {
	fake.identitiesMutex.RLock()
	defer fake.identitiesMutex.RUnlock()
	return len(fake.identitiesArgsForCall)
}

func (fake *FakeManager) IdentitiesCalls(stub func() ([]iam.Identity, error)) {
	fake.identitiesMutex.Lock()
	defer fake.identitiesMutex.Unlock()
	fake.IdentitiesStub = stub
}

func (fake *FakeManager) IdentitiesReturns(result1 []iam.Identity, result2 error) {
	fake.identitiesMutex.Lock()
	defer fake.identitiesMutex.Unlock()
	fake.IdentitiesStub = nil
	fake.identitiesReturns = struct {
		result1 []iam.Identity
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) IdentitiesReturnsOnCall(i int, result1 []iam.Identity, result2 error) {
	fake.identitiesMutex.Lock()
	defer fake.identitiesMutex.Unlock()
	fake.IdentitiesStub = nil
	if fake.identitiesReturnsOnCall == nil {
		fake.identitiesReturnsOnCall = make(map[int]struct {
			result1 []iam.Identity
			result2 error
		})
	}
	fake.identitiesReturnsOnCall[i] = struct {
		result1 []iam.Identity
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) RemoveIdentity(arg1 string, arg2 bool) error {
	fake.removeIdentityMutex.Lock()
	ret, specificReturn := fake.removeIdentityReturnsOnCall[len(fake.removeIdentityArgsForCall)]
	fake.removeIdentityArgsForCall = append(fake.removeIdentityArgsForCall, struct {
		arg1 string
		arg2 bool
	}{arg1, arg2})
	stub := fake.RemoveIdentityStub
	fakeReturns := fake.removeIdentityReturns
	fake.recordInvocation("RemoveIdentity", []interface{}{arg1, arg2})
	fake.removeIdentityMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeManager) RemoveIdentityCallCount() int {
	fake.removeIdentityMutex.RLock()
	defer fake.removeIdentityMutex.RUnlock()
	return len(fake.removeIdentityArgsForCall)
}

func (fake *FakeManager) RemoveIdentityCalls(stub func(string, bool) error) {
	fake.removeIdentityMutex.Lock()
	defer fake.removeIdentityMutex.Unlock()
	fake.RemoveIdentityStub = stub
}

func (fake *FakeManager) RemoveIdentityArgsForCall(i int) (string, bool) {
	fake.removeIdentityMutex.RLock()
	defer fake.removeIdentityMutex.RUnlock()
	argsForCall := fake.removeIdentityArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeManager) RemoveIdentityReturns(result1 error) {
	fake.removeIdentityMutex.Lock()
	defer fake.removeIdentityMutex.Unlock()
	fake.RemoveIdentityStub = nil
	fake.removeIdentityReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) RemoveIdentityReturnsOnCall(i int, result1 error) {
	fake.removeIdentityMutex.Lock()
	defer fake.removeIdentityMutex.Unlock()
	fake.RemoveIdentityStub = nil
	if fake.removeIdentityReturnsOnCall == nil {
		fake.removeIdentityReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeIdentityReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) Save() error {
	fake.saveMutex.Lock()
	ret, specificReturn := fake.saveReturnsOnCall[len(fake.saveArgsForCall)]
	fake.saveArgsForCall = append(fake.saveArgsForCall, struct {
	}{})
	stub := fake.SaveStub
	fakeReturns := fake.saveReturns
	fake.recordInvocation("Save", []interface{}{})
	fake.saveMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeManager) SaveCallCount() int {
	fake.saveMutex.RLock()
	defer fake.saveMutex.RUnlock()
	return len(fake.saveArgsForCall)
}

func (fake *FakeManager) SaveCalls(stub func() error) {
	fake.saveMutex.Lock()
	defer fake.saveMutex.Unlock()
	fake.SaveStub = stub
}

func (fake *FakeManager) SaveReturns(result1 error) {
	fake.saveMutex.Lock()
	defer fake.saveMutex.Unlock()
	fake.SaveStub = nil
	fake.saveReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) SaveReturnsOnCall(i int, result1 error) {
	fake.saveMutex.Lock()
	defer fake.saveMutex.Unlock()
	fake.SaveStub = nil
	if fake.saveReturnsOnCall == nil {
		fake.saveReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.saveReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addAccountMutex.RLock()
	defer fake.addAccountMutex.RUnlock()
	fake.addIdentityMutex.RLock()
	defer fake.addIdentityMutex.RUnlock()
	fake.addIdentityIfNotPresentMutex.RLock()
	defer fake.addIdentityIfNotPresentMutex.RUnlock()
	fake.identitiesMutex.RLock()
	defer fake.identitiesMutex.RUnlock()
	fake.removeIdentityMutex.RLock()
	defer fake.removeIdentityMutex.RUnlock()
	fake.saveMutex.RLock()
	defer fake.saveMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ authconfigmap.Manager = new(FakeManager)
